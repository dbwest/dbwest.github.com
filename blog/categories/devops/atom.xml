<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Testblog]]></title>
  <link href="http://dbwest.github.io/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://dbwest.github.io/"/>
  <updated>2013-10-11T15:18:48-04:00</updated>
  <id>http://dbwest.github.io/</id>
  <author>
    <name><![CDATA[David West]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Current Status for the Appium Vagrant Box]]></title>
    <link href="http://dbwest.github.io/blog/2013/10/10/current-status-for-the-appium-vagrant-box/"/>
    <updated>2013-10-10T17:20:00-04:00</updated>
    <id>http://dbwest.github.io/blog/2013/10/10/current-status-for-the-appium-vagrant-box</id>
    <content type="html"><![CDATA[<p>Currently I&rsquo;m stuck with a box that doesn&rsquo;t quite provision automatically yet, and isn&rsquo;t self contained as much as I&rsquo;d like it. Here are the reasons so far.</p>

<p>Problems related to automatic provisioning:</p>

<ul>
<li>I&rsquo;m not able to modify environment variables or add to the path on the Vagrant box yet. Here&rsquo;s how I&rsquo;ve been trying to do it:
<code>bash provision2.sh
...
export ANDROID_HOME=export ANDROID_HOME=$HOME/adt-bundle-linux-x86_64-20130917/sdk
echo 'PATH="$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools"' &gt;&gt; ~/.bashrc
...
</code>
Unfortunately, that&rsquo;s not working. It&rsquo;s preventing me from completing the automated install on somethings I prefer not to get with a package manager or simply can&rsquo;t. So far, I&rsquo;m doing this with node.js and the Android SDK.</li>
<li>I haven&rsquo;t set the scripts up so that they can automatically install Jenkins plugins yet. The way I&rsquo;m trying to do this now seems to only work if the .war file is deployed and running:
<code>bash provision2.sh
...
/run/jenkins/war/WEB-INF/java -jar jenkins-cli.jar -s http://127.0.0.1:8080/ install-plugin git
...
</code></li>
</ul>


<p>Reasons the box isn&rsquo;t self contained yet:</p>

<ul>
<li>Appium seems to have to be on the mac that&rsquo;s doing iOS tests, because of the way it works with Instruments (which is part of XCode.) I&rsquo;ve thought of ways I might try and get around this, including using netcat. Dan Cuellar, a top contributor to Appium replied on the Appium Google Group, Appium Discuss, that integrating the libimobiledevice library into Appium would make driving iOS tests from a Vagrant box possible.</li>
</ul>


<p>Things I still need to try:</p>

<ul>
<li>The box as it stands may, after a bit of manual installation and configuration, be able to drive and Android Genymotion emulator. Maybe soon in my spare time I&rsquo;ll get a chance to check that&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boxen: Github's tool for automated developer environment setup]]></title>
    <link href="http://dbwest.github.io/blog/2013/10/08/boxen-githubs-tool-for-automated-developer-environment-setup/"/>
    <updated>2013-10-08T14:46:00-04:00</updated>
    <id>http://dbwest.github.io/blog/2013/10/08/boxen-githubs-tool-for-automated-developer-environment-setup</id>
    <content type="html"><![CDATA[<p>This is old news, but Github has open sourced <a href="http://boxen.github.com/">Boxen</a> the tool it uses inhouse for automated dev environment setup.</p>

<p>It uses <a href="http://puppetlabs.com/">Puppet</a> for everything, and only supports OSX Mountain Lion and above (so it&rsquo;s Mac-only).</p>

<p>I&rsquo;ve been wanting to learn Puppet, so I&rsquo;m going to check it out.</p>

<p>Anyone interested in learning Puppet might start <a href="http://puppetlabs.com/misc/pdf-doc">here</a> where you can download all the Puppet docs.</p>

<p>Another good place may be <a href="http://grahamgilbert.com/blog/2013/01/25/getting-started-with-puppet-part-1/">Graham Gilbert&rsquo;s tutorials</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Jenkins Plugins from the Commandline]]></title>
    <link href="http://dbwest.github.io/blog/2013/10/08/installing-jenkins-plugins-from-the-commandline/"/>
    <updated>2013-10-08T13:57:00-04:00</updated>
    <id>http://dbwest.github.io/blog/2013/10/08/installing-jenkins-plugins-from-the-commandline</id>
    <content type="html"><![CDATA[<p>To make it easier to write provisioning scripts, I looked for a way to use the commandline to install Jenkins plugins. This is what is working for me:</p>

<p><code>bash Terminal
vagrant@precise64:/run/jenkins/war/WEB-INF$ java -jar jenkins-cli.jar -s http://127.0.0.1:8080/ install-plugin git
</code></p>

<p>Worked like a charm&hellip;you might have to restart Jenkins afterwards (<code>java -jar jenkins-cli.jar -s http://127.0.0.1:8080/ restart</code> is one way&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving Towards a Complete Testing Environment in a Box]]></title>
    <link href="http://dbwest.github.io/blog/2013/10/08/moving-towards-a-complete-testing-environment-in-a-box/"/>
    <updated>2013-10-08T07:42:00-04:00</updated>
    <id>http://dbwest.github.io/blog/2013/10/08/moving-towards-a-complete-testing-environment-in-a-box</id>
    <content type="html"><![CDATA[<h2>Current Status</h2>

<p>I&rsquo;ve been working on a self contained Vagrant box for testing. Currently it loads, Appium, Jenkins, and rvm and some other things. It provisions from a base image and forwards the ports for Jenkins.</p>

<h2>What&rsquo;s Next</h2>

<p>I still need to</p>

<ul>
<li>Find a way to have the box drive tests on simulators on the host machine. I&rsquo;m going to see if the guest box can do this, even if the host box isn&rsquo;t the machine with Appium. I want the Vagrant box to have as much on it as I can put on it, and I want to see if it can be where Appium resides.</li>
<li>Modify the tests to use Appium remotely on the Vagrant box. I&rsquo;ll want to fork a test repo I&rsquo;ve been working on, modify it to work with the new setup</li>
<li>Make jobs to kick off the tests.</li>
<li>And maybe more! I&rsquo;ll find out&hellip;</li>
</ul>


<p>The prospect of doing this is very exciting to me. Setting all this up takes a lot of steps, so when done by hand, it may work on one machine and not on another. This should get closer to solving that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skipping Provisioning by Saving a Preconfigured Vagrant Box]]></title>
    <link href="http://dbwest.github.io/blog/2013/10/05/skipping-provisioning-by-saving-a-preconfigured-box/"/>
    <updated>2013-10-05T10:48:00-04:00</updated>
    <id>http://dbwest.github.io/blog/2013/10/05/skipping-provisioning-by-saving-a-preconfigured-box</id>
    <content type="html"><![CDATA[<h2>Why you might want to do this</h2>

<p>Even though automatic provisioning with Vagrant is great, because it allows you to take a download a publicly available base image that takes up gigs of space and custom configure it with a very small, easily shareable repo, sometimes it would be really nice to skip provisioning, because it can take a long time. Downloading and setting up things like databases or Java or things with tons of dependencies can take a long time, and you also need an internet connection to do the provisioning. Sometimes, it would be nice to just have something preconfigured, so you don&rsquo;t have to wait for the install process to go through. Preconfigured boxes will be bigger, but sometimes that&rsquo;s ok. You have a larger download up front but don&rsquo;t have to wait for the setup. So if you have a complicated provisioning process that takes a long time, this is what you can do.</p>

<h2>Use an existing environment</h2>

<p>If you already have a box, just <code>vagrant up</code>, and then <code>vagrant ssh</code> into it.</p>

<p>Otherwise, for the sake of making this post self-contained:</p>

<p><code>bash Terminal
$ mkdir vagrant_example
$ cd vagrant_example
$ vagrant init precise64 http://files.vagrantup.com/precise64.box
$ vagrant up
$ vagrant ssh
</code></p>

<p>Now you can install some random program. We&rsquo;ll install Appium:
<code>bash Terminal
vagrant@precise64:~$ wget http://nodejs.org/dist/v0.10.20/node-v0.10.20-linux-x64.tar.gz
vagrant@precise64:~$ tar zxvf http://nodejs.org/dist/v0.10.20/node-v0.10.20-linux-x64.tar.gz
vagrant@precise64:~$ echo 'PATH="$PATH:$HOME/node-v0.10.20-linux-x64/bin"' &gt;&gt; ~/.bashrc
vagrant@precise64:~$ source ~/.bashrc
vagrant@precise64:~$ sudo npm install -g appium
vagrant@precise64:~$ sudo npm install wd
</code></p>

<p>Finally, exit out of ssh with <code>CTRL-D</code> and type <code>vagrant package</code>. Vagrant will tell you where it puts the box. You can rename it, copy it, distribute it, and share it on a local network or on the internet.</p>
]]></content>
  </entry>
  
</feed>
