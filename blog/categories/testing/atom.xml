<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Testblog]]></title>
  <link href="http://dbwest.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://dbwest.github.io/"/>
  <updated>2013-10-02T19:02:36-04:00</updated>
  <id>http://dbwest.github.io/</id>
  <author>
    <name><![CDATA[David West]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Appium for iOS and Android Automated Testing]]></title>
    <link href="http://dbwest.github.io/blog/2013/09/16/appium-for-ios-and-android-automated-testing/"/>
    <updated>2013-09-16T13:38:00-04:00</updated>
    <id>http://dbwest.github.io/blog/2013/09/16/appium-for-ios-and-android-automated-testing</id>
    <content type="html"><![CDATA[<h2>Suggestion</h2>

<p>If you get stuck, use <a href="http://stackoverflow.com">stackoverflow</a>, <a href="http://superuser.com">superuser</a>, or any other Stack Exchange site like <a href="http://apple.stackexchange.com/">ask different</a>. They are all amazingly helpful. Any knowledge of Ruby, the OS X (UNIX-like) command-line (for file permissions user groups, etc) will help you understand these instructions and get going in the right direction or get back on path if you&rsquo;ve lost your way.</p>

<h2>Tested with / Requirements</h2>

<ul>
<li>Macs with Lion OS and Mountain Lion OS</li>
<li>Ruby 1.9.3p448 (installed from binary)</li>
<li>Appium 0.8.2 (needed if you are using Lion), Appium 0.9.0 (Mountain Lion)</li>
<li>Chromedriver 2.1 (for Lion) or Chromedriver 2.2 (for Mountain Lion)</li>
<li>homebrew package manager</li>
<li>node.js</li>
<li>Install GenyMotion or the iOS simulator</li>
</ul>


<p><strong>note: administrative access required for part of setup</strong></p>

<h2>Installation and Configuration</h2>

<h3>Preliminary Setup: install XCode, the Command Line Tools and the iOS simulator</h3>

<ol>
<li><strong>Download XCode from the Apple Developer&rsquo;s website.</strong></li>
<li><strong>Install it from the package</strong></li>
<li><strong>After the XCode install is complete, install the Command Line Tools and the Simulator:</strong>

<ul>
<li>Start XCode, open XCode Preferences (command+,) and select downloads. Click the install button for the command line tools and iOS. Wait for the long downloads and follow all dialogues to install.</li>
</ul>
</li>
</ol>


<h3>Preliminary Setup: users and groups (admin access required)</h3>

<ol>
<li><strong>Setup groups for homebrew and automated test users:</strong> from terminal:
<code>bash bash
$ sudo dseditgroup -o create brew testers
</code>
Enter your password as needed (you must be an admin to use a <code>sudo</code> command.)</li>
<li><strong>Add user to groups:</strong> This example uses <code>supertester</code> as an example user. You can replace that user with any user you need to add:
<code>bash bash
$ sudo dseditgroup -o edit -a supertester -t user testers
$ sudo dseditgroup -o edit -a supertester -t user brew
</code></li>
</ol>


<h3>Install and configure homebrew package manager (admin needed)</h3>

<ol>
<li><strong>Visit the Homebrew website:</strong> <a href="http://brew.sh/">brew.sh</a></li>
<li><strong>Install Homebrew:</strong> Paste this at the terminal prompt: <code>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"</code></li>
<li><strong>Change group for homebrew folder to &lsquo;brew&rsquo;:</strong> <code>sudo chgrp -R brew /usr/local</code> and type in your password.</li>
<li><strong>Give permissions to &lsquo;brew&rsquo; group:</strong> <code>sudo chmod -R 775 /usr/local</code></li>
<li><strong>Check to see that your permissions are working:</strong>
<code>bash bash
$ cd /usr/local/bin
$ touch my_test_file.tmp
$ ls
</code>
Look for the file &lsquo;my_test_file.tmp&rsquo;. If it is there, your permissions are set up correctly. Congratulations! <strong>Get rid of your test file:</strong> <code>rm my_test_file.tmp</code></li>
</ol>


<h3>Install Appium</h3>

<ul>
<li><strong>For a graphical user interface (needed if using Lion)</strong>

<ol>
<li> <strong>Download the Appium Package and Install it by copying to Applications:</strong> The website is <a href="http://appium.io">appium.io</a>. You will</li>
</ol>
</li>
<li><strong>For a command line install (possible if using Mountain Lion)</strong>
  <strong>same as above, or:</strong>

<ol>
<li> <strong>Install node.js using brew:</strong> <code>brew install node</code></li>
<li> <strong>Install appium globally using node&rsquo;s package manager &lsquo;npm&rsquo;:</strong> <code>sudo npm install -g appium</code></li>
<li> <strong>Use the package manager to install webdriver, too:</strong> <code>npm install wd</code></li>
</ol>
</li>
</ul>


<h3>Install Ruby from source</h3>

<ol>
<li><strong>Download libyaml:</strong> from <a href="[http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz">http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz</a></li>
<li><strong>Install libyaml:</strong>

<ol>
<li><strong>Go to the directory you downloaded it in, for example &lsquo;~/Downloads&rsquo;:</strong> <code>cd ~/Downloads</code></li>
<li><strong>Unzip and untar it:</strong> <code>tar zxvf yaml-0.1.4.tar.gz</code></li>
<li><strong>Enter the libyaml directory you extracted:</strong> <code>cd yaml-0.1.4</code></li>
<li><strong>Enter these commands to install and wait while the source is compiled:</strong> <code>configure &amp;&amp; make &amp;&amp; make install</code>

<ul>
<li>If you want the mac to tell you when it is done, you can turn up your volume and type this in, instead: <code>configure &amp;&amp; make &amp;&amp; make install &amp;&amp; say "I am done"</code></li>
</ul>
</li>
</ol>
</li>
<li><strong>Download ruby:</strong> from <a href="http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p448.tar.gz/">mirror 1</a>, <a href="http://xyz.lcs.mit.edu/ruby/ruby-1.9.3-p448.tar.gz/">mirror 2</a>, <a href="http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/ruby-1.9.3-p448.tar.gz/">mirror 3</a>, <a href="https://ftp.ruby-lang.org/pub/ruby/ruby-1.9.3-p448.tar.gz/">mirror 4</a>, or <a href="http://www.dnsbalance.ring.gr.jp/archives/lang/ruby/ruby-1.9.3-p448.tar.gz/">mirror5</a>.</li>
<li><strong>Install ruby:</strong>

<ol>
<li><strong>Unzip it and untar it and enter the directory:</strong>  <code>tar zxvf ruby-1.9.3-p448.tar.gz &amp;&amp; cd ruby-1.9.3-p448</code></li>
<li><strong>Compile source and install it using these commands:</strong> <code>configure &amp;&amp; make &amp;&amp; make install</code></li>
<li><strong>Make a gem repository in your home directory:</strong> <code>mkdir ~/mygemrepository</code></li>
<li><strong>Setup environment variables and paths:</strong> using &lsquo;nano&rsquo;, &lsquo;vi&rsquo;, or your text editor of choice:

<ul>
<li>Add <code>export GEM_HOME=~/mygemrepository</code> to the top of your ~/.bash_profile file.</li>
<li><strong>Change your path so that it includes &lsquo;~/mygemrepository/bin&rsquo; and so that &lsquo;/usr/local/bin&rsquo; takes precedence over &lsquo;/usr/bin&rsquo;:</strong> you should make or edit a line in your &lsquo;~/.bash_profile&rsquo; so that you have something like: <code>PATH=/usr/local/bin:~/mygemrepository/bin:$PATH</code>. It is important that &lsquo;/usr/local/bin&rsquo; and &lsquo;~/mygemrepository/bin&rsquo; be at the beginning of this line, as shown.</li>
</ul>
</li>
<li><strong>Test to see that ruby is installed properly, and that you are using the correct version:</strong>

<ul>
<li>Type <code>ruby -v</code> at the command prompt. The output should include: &lsquo;ruby 1.9.3p448&rsquo;</li>
</ul>
</li>
</ol>
</li>
</ol>


<h3>Install Chromedriver</h3>

<ol>
<li><strong>Download Chromedriver</strong>

<ol>
<li><strong>Download chromedriver_mac32_2.2.zip if you have Mountain Lion or chromedriver_mac32_2.1.zip if you have Lion:</strong>

<ul>
<li>To see all downloads you will need to choose &lsquo;All downloads&rsquo; from the dropdown in the search section and press the search button.</li>
</ul>
</li>
<li><strong>Move chromedriver to a binary directory in your path:</strong>

<ul>
<li>Choose the download you need, unzip it, and from a prompt type (assuming you have it in ~/Downloads and downloaded 2.1:) <code>cp ~/Downloads/chromedriver_mac32_2.1.zip /usr/local/bin</code></li>
</ul>
</li>
<li><strong>Test your installation:</strong>

<ul>
<li>Test it by typing, from a prompt: <code>chromedriver</code></li>
<li>You should see &lsquo;Started ChromeDriver (v2.1) on port 9515&rsquo;</li>
<li><strong>Troubleshooting Advice:</strong> If you see an error you can try downloading an earlier version.</li>
</ul>
</li>
</ol>
</li>
</ol>


<h3>Install the GenyMotion Android Emulator (needs admin access)</h3>

<p><strong>These instructions may change soon, so I&rsquo;ll keep them short</strong>
1. <strong>Download and Install VirtualBox (needs admin access)</strong></p>

<pre><code>- Search for it on Google.
- Download it off the Oracle website.
- Open the package and follow the dialogues to install VirtualBox (it is required for the Genymotion Android Emulator)
</code></pre>

<ol>
<li><strong>Setup Genymotion (current as of 09/16/13) and load the Chrome web browser onto it</strong>

<ul>
<li>Currently you need an account (free) with Genymotion to download or even install virtual machine images using Genymotion. Sign up for one.</li>
<li>Download the Genymotion installer for mac.</li>
<li>Install it using the dialogues.</li>
<li>Open Genymotion, log into the Genymotion cloud, and choose an image to download from the cloud. If you don&rsquo;t know what to download, just make sure that the Android operating system is 4.1 or higher.</li>
<li>Click on the applications menu button and choose the &lsquo;Play Store&rsquo; application.</li>
<li>Search for Chrome, and download it.</li>
</ul>
</li>
</ol>


<h2>Android SDK Setup</h2>

<ol>
<li><strong>Download the SDK:</strong> Go to <a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a> and click the &lsquo;Download the SDK&rsquo; button.</li>
<li><strong>Install the SDK by following the directions</strong></li>
<li><strong>Set up paths to Android Tools:</strong>
<strong>Add these lines to the top of your &lsquo;~/.bash_profile&rsquo;:</strong>
<code>bash ~/.bash_profile    
export ANDROID_HOME=/usr/local/adt/sdk
export ANDROID_SDK=$ANDROID_HOME
</code>
<strong>Add these lines to the bottom of your &lsquo;~/.bash_profile&rsquo;:</strong>
<code>bash ~/.bash_profile
PATH=$PATH:$ANDROID_HOME/tools
PATH=$PATH:$ANDROID_HOME/platform-tools
</code>
<strong>These commands should now work without errors:</strong> <code>adb</code> and <code>android</code></li>
</ol>


<h2>Appium Setup</h2>

<h3>Starting the Application if the GUI is installed</h3>

<ol>
<li><strong>Open the Appium application.</strong>

<ul>
<li><strong>If using the Android emulator:</strong>

<ol>
<li> <strong>Click the &lsquo;Package&rsquo; checkbox after clicking the &lsquo;Android&rsquo; tab</strong></li>
<li> <strong>Enter <code>com.android.chrome</code> into the &lsquo;Package&rsquo; text field</strong></li>
<li> <strong>Click &lsquo;Launch&rsquo;</strong></li>
</ol>
</li>
<li><strong>If using the iOS simulator:</strong>

<ol>
<li> <strong>Click the &lsquo;iOS&rsquo; tab</strong></li>
<li> <strong>Check the box that says &lsquo;Use mobile Safari&rsquo;</strong></li>
</ol>
</li>
</ul>
</li>
</ol>


<h3>Starting Appium from the Command Line</h3>

<ol>
<li><strong>For Android:</strong> At the terminal: <code>appium --app-pkg com.android.chrome</code></li>
<li><strong>For iOS:</strong> <code>appium --safari</code></li>
</ol>


<h2>Sample Android Scripts to Test Your Setup:</h2>

<p>These scripts should work with your setup, they are also available at <a href="https://gist.github.com/dbwest/6551886"><code>https://gist.github.com/dbwest/6551886</code></a>. They are written for Android. Connect your device or start your emulator before using these:
<strong>Make a file called <code>Gemfile</code> with the following contents:</strong>
<code>ruby Gemfile
source "http://rubygems.org"
gem 'watir-webdriver'
gem 'selenium-webdriver'
</code>
<strong>Make a file called <code>android_appium.rb</code> with the following contents:</strong>
``` ruby android_appium.rb</p>

<h1>Connect your device or start your emulator before running this script</h1>

<h1>make sure appium and chromedriver aren&rsquo;t started yet.</h1>

<h1><code>killall node</code></h1>

<p><code>killall chromedriver</code></p>

<h1>start appium server for chrome pkg and redirect stderr and stdout to keep terminal clean</h1>

<h1><code>appium --app-pkg com.android.chrome &amp; &gt; /dev/null 2&gt;&amp;1</code></h1>

<h1>prepare device</h1>

<p><code>adb kill-server</code>
<code>adb devices</code>
require &lsquo;fileutils&rsquo;
require &lsquo;watir-webdriver&rsquo;
require &lsquo;selenium-webdriver&rsquo;</p>

<h1>The address and port of our Appium server</h1>

<p>server_url = &ldquo;<a href="http://localhost:4723/wd/hub/">http://localhost:4723/wd/hub/</a>&rdquo;</p>

<h1>Hash with information selenium webdriver needs</h1>

<p>capabilities =
  {</p>

<pre><code>  'app' =&gt; 'chrome',
  'device' =&gt; 'Android'
</code></pre>

<p>  }</p>

<h1>Setup webdrivers to talk to Appium and mobile chrome and use implicit_waits to poll with long timeout to see if pages are loaded</h1>

<p>driver = Selenium::WebDriver.for(:remote, :desired_capabilities => capabilities, :url => server_url)#, :profile => profile)
browser = Watir::Browser.new driver
browser.driver.manage.timeouts.implicit_wait = 30
puts &ldquo;new ANDROID Watir browser object instantiated&rdquo;</p>

<h1>automated browser code using Watir browser object and methods</h1>

<p>browser.goto &ldquo;<a href="http://saucelabs.com/test/guinea-pig">http://saucelabs.com/test/guinea-pig</a>&rdquo;
browser.text_field(:id=>&ldquo;fbemail&rdquo;).set &lsquo;<a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x62;&#111;&#98;&#98;&#x61;&#x78;&#x74;&#x65;&#114;&#64;&#x62;&#x6f;&#x62;&#x62;&#97;&#120;&#x74;&#x65;&#114;&#x2e;&#109;&#x65;">&#x62;&#x6f;&#98;&#x62;&#97;&#x78;&#116;&#x65;&#x72;&#x40;&#x62;&#111;&#x62;&#98;&#x61;&#x78;&#116;&#x65;&#x72;&#x2e;&#109;&#101;</a>&rsquo;
sleep 1</p>

<h1>screenshot code</h1>

<p>%x(adb shell /system/bin/screencap -p /sdcard/screenshot.png)
time = Time.now.to_i.to_s
puts &lsquo;current directory is&rsquo; + <code>pwd</code>
%x(adb pull /sdcard/screenshot.png ./images/screenshot.png)
FileUtils.mv(&lsquo;./images/screenshot.png&rsquo;, &lsquo;./images/screenshot&rsquo; + time + &lsquo;.png&rsquo;)
%x(adb shell rm /sdcard/screenshot.png)
<code>open images/.</code>
```</p>

<h2>Credit Where Credit is Due</h2>

<ul>
<li>Matt Bussa</li>
<li>Pillar Technology</li>
<li>Dan Cuellar and Levi Wilson</li>
<li>Justin Lipps at Sauce Labs</li>
<li>And all the testers that know tons about Watir and Ruby: Alister Scott, Zeljko Filipin</li>
</ul>

]]></content>
  </entry>
  
</feed>
